--------------------------------------------------------------------------------
-- Copyright (c) 1995-2003 Xilinx, Inc.
-- All Right Reserved.
--------------------------------------------------------------------------------
--   ____  ____ 
--  /   /\/   / 
-- /___/  \  /    Vendor: Xilinx 
-- \   \   \/     Version : 10.1.03
--  \   \         Application : ISE
--  /   /         Filename : asdasd.ant
-- /___/   /\     Timestamp : Wed Oct 25 18:00:41 2017
-- \   \  /  \ 
--  \___\/\___\ 
--
--Command: 
--Design Name: asdasd
--Device: Xilinx
--

library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.STD_LOGIC_ARITH.ALL;
use IEEE.STD_LOGIC_UNSIGNED.ALL;
USE IEEE.STD_LOGIC_TEXTIO.ALL;
USE STD.TEXTIO.ALL;

ENTITY asdasd IS
END asdasd;

ARCHITECTURE testbench_arch OF asdasd IS
    FILE RESULTS: TEXT OPEN WRITE_MODE IS "F:\contador_0_9999\asdasd.ano";

    COMPONENT contador
        PORT (
            reloj : In std_logic;
            pulsador : In std_logic;
            llave : In std_logic;
            inicio : In std_logic;
            reset : In std_logic;
            display : Out std_logic_vector (6 DownTo 0);
            transistor1 : Out std_logic;
            transistor2 : Out std_logic;
            transistor3 : Out std_logic;
            transistor4 : Out std_logic
        );
    END COMPONENT;

    SIGNAL reloj : std_logic := '0';
    SIGNAL pulsador : std_logic := '0';
    SIGNAL llave : std_logic := '0';
    SIGNAL inicio : std_logic := '0';
    SIGNAL reset : std_logic := '0';
    SIGNAL display : std_logic_vector (6 DownTo 0) := "0000000";
    SIGNAL transistor1 : std_logic := '0';
    SIGNAL transistor2 : std_logic := '0';
    SIGNAL transistor3 : std_logic := '0';
    SIGNAL transistor4 : std_logic := '0';

    SHARED VARIABLE TX_ERROR : INTEGER := 0;
    SHARED VARIABLE TX_OUT : LINE;

    constant PERIOD : time := 200 ns;
    constant DUTY_CYCLE : real := 0.5;
    constant OFFSET : time := 100 ns;

    BEGIN
        UUT : contador
        PORT MAP (
            reloj => reloj,
            pulsador => pulsador,
            llave => llave,
            inicio => inicio,
            reset => reset,
            display => display,
            transistor1 => transistor1,
            transistor2 => transistor2,
            transistor3 => transistor3,
            transistor4 => transistor4
        );

        PROCESS    -- clock process for reloj
        BEGIN
            WAIT for OFFSET;
            CLOCK_LOOP : LOOP
                reloj <= '0';
                WAIT FOR (PERIOD - (PERIOD * DUTY_CYCLE));
                reloj <= '1';
                WAIT FOR (PERIOD * DUTY_CYCLE);
            END LOOP CLOCK_LOOP;
        END PROCESS;

        PROCESS    -- Annotation process for reloj
            VARIABLE TX_TIME : INTEGER := 0;

            PROCEDURE ANNOTATE_display(
                TX_TIME : INTEGER
            ) IS
                VARIABLE TX_STR : String(1 to 4096);
                VARIABLE TX_LOC : LINE;
            BEGIN
                STD.TEXTIO.write(TX_LOC, string'("Annotate["));
                STD.TEXTIO.write(TX_LOC, TX_TIME);
                STD.TEXTIO.write(TX_LOC, string'(", display, "));
                IEEE.STD_LOGIC_TEXTIO.write(TX_LOC, display);
                STD.TEXTIO.write(TX_LOC, string'("]"));
                TX_STR(TX_LOC.all'range) := TX_LOC.all;
                STD.TEXTIO.writeline(RESULTS, TX_LOC);
                STD.TEXTIO.Deallocate(TX_LOC);
            END;
            PROCEDURE ANNOTATE_transistor1(
                TX_TIME : INTEGER
            ) IS
                VARIABLE TX_STR : String(1 to 4096);
                VARIABLE TX_LOC : LINE;
            BEGIN
                STD.TEXTIO.write(TX_LOC, string'("Annotate["));
                STD.TEXTIO.write(TX_LOC, TX_TIME);
                STD.TEXTIO.write(TX_LOC, string'(", transistor1, "));
                IEEE.STD_LOGIC_TEXTIO.write(TX_LOC, transistor1);
                STD.TEXTIO.write(TX_LOC, string'("]"));
                TX_STR(TX_LOC.all'range) := TX_LOC.all;
                STD.TEXTIO.writeline(RESULTS, TX_LOC);
                STD.TEXTIO.Deallocate(TX_LOC);
            END;
            PROCEDURE ANNOTATE_transistor2(
                TX_TIME : INTEGER
            ) IS
                VARIABLE TX_STR : String(1 to 4096);
                VARIABLE TX_LOC : LINE;
            BEGIN
                STD.TEXTIO.write(TX_LOC, string'("Annotate["));
                STD.TEXTIO.write(TX_LOC, TX_TIME);
                STD.TEXTIO.write(TX_LOC, string'(", transistor2, "));
                IEEE.STD_LOGIC_TEXTIO.write(TX_LOC, transistor2);
                STD.TEXTIO.write(TX_LOC, string'("]"));
                TX_STR(TX_LOC.all'range) := TX_LOC.all;
                STD.TEXTIO.writeline(RESULTS, TX_LOC);
                STD.TEXTIO.Deallocate(TX_LOC);
            END;
            PROCEDURE ANNOTATE_transistor3(
                TX_TIME : INTEGER
            ) IS
                VARIABLE TX_STR : String(1 to 4096);
                VARIABLE TX_LOC : LINE;
            BEGIN
                STD.TEXTIO.write(TX_LOC, string'("Annotate["));
                STD.TEXTIO.write(TX_LOC, TX_TIME);
                STD.TEXTIO.write(TX_LOC, string'(", transistor3, "));
                IEEE.STD_LOGIC_TEXTIO.write(TX_LOC, transistor3);
                STD.TEXTIO.write(TX_LOC, string'("]"));
                TX_STR(TX_LOC.all'range) := TX_LOC.all;
                STD.TEXTIO.writeline(RESULTS, TX_LOC);
                STD.TEXTIO.Deallocate(TX_LOC);
            END;
            PROCEDURE ANNOTATE_transistor4(
                TX_TIME : INTEGER
            ) IS
                VARIABLE TX_STR : String(1 to 4096);
                VARIABLE TX_LOC : LINE;
            BEGIN
                STD.TEXTIO.write(TX_LOC, string'("Annotate["));
                STD.TEXTIO.write(TX_LOC, TX_TIME);
                STD.TEXTIO.write(TX_LOC, string'(", transistor4, "));
                IEEE.STD_LOGIC_TEXTIO.write(TX_LOC, transistor4);
                STD.TEXTIO.write(TX_LOC, string'("]"));
                TX_STR(TX_LOC.all'range) := TX_LOC.all;
                STD.TEXTIO.writeline(RESULTS, TX_LOC);
                STD.TEXTIO.Deallocate(TX_LOC);
            END;
        BEGIN
            WAIT for 1 fs;
            ANNOTATE_display(0);
            ANNOTATE_transistor1(0);
            ANNOTATE_transistor2(0);
            ANNOTATE_transistor3(0);
            ANNOTATE_transistor4(0);
            WAIT for OFFSET;
            TX_TIME := TX_TIME + 100;
            ANNO_LOOP : LOOP
                --Rising Edge
                WAIT for 115 ns;
                TX_TIME := TX_TIME + 115;
                ANNOTATE_display(TX_TIME);
                ANNOTATE_transistor1(TX_TIME);
                ANNOTATE_transistor2(TX_TIME);
                ANNOTATE_transistor3(TX_TIME);
                ANNOTATE_transistor4(TX_TIME);
                WAIT for 85 ns;
                TX_TIME := TX_TIME + 85;
            END LOOP ANNO_LOOP;
        END PROCESS;

        PROCESS
            BEGIN
                -- -------------  Current Time:  100ns
                WAIT FOR 100 ns;
                inicio <= '1';
                -- -------------------------------------
                -- -------------  Current Time:  385ns
                WAIT FOR 285 ns;
                inicio <= '0';
                -- -------------------------------------
                -- -------------  Current Time:  985ns
                WAIT FOR 600 ns;
                inicio <= '1';
                -- -------------------------------------
                WAIT FOR 9215 ns;

                STD.TEXTIO.write(TX_OUT, string'("Total[]"));
                STD.TEXTIO.writeline(RESULTS, TX_OUT);
                ASSERT (FALSE) REPORT
                    "Success! Simulation for annotation completed"
                    SEVERITY FAILURE;
            END PROCESS;

    END testbench_arch;

